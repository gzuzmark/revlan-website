---
import Icon from "./Icon.astro";
import Button from "./ui/LinkOrButton.astro";
import { t } from "i18next";
import { Trans } from "astro-i18next/components";
---

<form
  action="https://api.web3forms.com/submit"
  method="POST"
  id="form"
  class="needs-validation"
  novalidate>
  <input
    type="hidden"
    name="access_key"
    value="075ce13f-266a-46fd-ad56-ca4fbf2a9dbf"
  />
  <div class="flex flex-wrap -m-2">
    <div class="p-2 w-full md:w-1/2">
      <div class="relative">
        <label for="name" class="leading-7 text-sm text-gray-600"
          >{t("form.firstName.label")}</label
        >
        <input
          type="text"
          id="name"
          placeholder={t("form.firstName.placeholder")}
          name="name"
          class="w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-red-500 focus:bg-white focus:ring-2 focus:ring-red-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out"
        />
        <div class="empty-feedback invalid-feedback text-red-400 text-sm mt-1">
          {t("form.firstName.error")}
        </div>
      </div>
    </div>
    <div class="p-2 w-full md:w-1/2">
      <div class="relative">
        <label for="name" class="leading-7 text-sm text-gray-600"
          >{t("form.lastName.label")}</label
        >
        <input
          type="text"
          id="lastname"
          placeholder={t("form.lastName.placeholder")}
          name="lastname"
          class="w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-red-500 focus:bg-white focus:ring-2 focus:ring-red-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out"
        />
        <div class="empty-feedback invalid-feedback text-red-400 text-sm mt-1">
          {t("form.lastName.error")}
        </div>
      </div>
    </div>
    <div class="p-2 w-full">
      <div class="relative">
        <label for="email" class="leading-7 text-sm text-gray-600"
          >{t("form.email.label")}</label
        >
        <input
          type="email"
          id="email"
          placeholder={t("form.email.placeholder")}
          name="email"
          class="w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-red-500 focus:bg-white focus:ring-2 focus:ring-red-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out"
        />
        <div class="empty-feedback text-red-400 text-sm mt-1">
          {t("form.email.error")}
        </div>
        <div class="invalid-feedback text-red-400 text-sm mt-1">
          {t("form.email.valid")}
        </div>
      </div>
    </div>
    <div class="p-2 w-full">
      <div class="relative">
        <label for="email" class="leading-7 text-sm text-gray-600"
          >{t("form.phone.label")}</label
        >
        <input
          type="tel"
          id="phone"
          placeholder={t("form.phone.placeholder")}
          name="phone"
          class="w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-red-500 focus:bg-white focus:ring-2 focus:ring-red-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out"
        />
        <div class="empty-feedback invalid-feedback text-red-400 text-sm mt-1">
          {t("form.phone.error")}
        </div>
      </div>
    </div>
    <div class="p-2 w-full">
      <div class="relative">
        <label for="message" class="leading-7 text-sm text-gray-600"
          >{t("form.message.label")}</label
        >
        <textarea
          id="message"
          name="message"
          placeholder={t("form.message.placeholder")}
          class="w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-red-500 focus:bg-white focus:ring-2 focus:ring-red-200 h-32 text-base outline-none text-gray-700 py-1 px-3 resize-none leading-6 transition-colors duration-200 ease-in-out"
        ></textarea>
        <div class="empty-feedback invalid-feedback text-red-400 text-sm mt-1">
          {t("form.message.error")}
        </div>
      </div>
    </div>
    <div class="p-2 w-full">
      <slot />
    </div>
    <div id="result" class="mt-3 text-center"></div>
  </div>
  <script is:inline>
    const form = document.getElementById("form");
    const result = document.getElementById("result");
    const button = document.getElementById("submitBtn");

    form.addEventListener("submit", function (e) {
      e.preventDefault();

      form.classList.add("was-validated");
      if (!form.checkValidity()) {
        form.querySelectorAll(":invalid")[0].focus();
        return;
      }
      const formData = new FormData(form);
      const object = Object.fromEntries(formData);
      const json = JSON.stringify(object);

      const name = object.name || "Hi!";

      button.textContent = "Sending...";
      button.disabled = true;
      fetch("https://api.web3forms.com/submit", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
        body: json,
      })
        .then(async (response) => {
          let json = await response.json();
          if (response.status == 200) {
            button.textContent = "Reach Out to Us Today";
            button.disabled = false;
            location.href = `/confirmation?name=${name}`;
            result.innerHTML = json.message;
          } else {
            console.log(response);
            result.classList.add("text-red-500");
            result.innerHTML = json.message;
          }
        })
        .catch((error) => {
          console.log(error);
          result.innerHTML = "Something went wrong!";
        })
        .then(function () {
          form.reset();
          form.classList.remove("was-validated");
          setTimeout(() => {
            result.style.display = "none";
          }, 5000);
        });
    });
  </script>
  <style>
    .invalid-feedback,
    .empty-feedback {
      display: none;
    }

    .was-validated :placeholder-shown:invalid ~ .empty-feedback {
      display: block;
    }

    .was-validated :not(:placeholder-shown):invalid ~ .invalid-feedback {
      display: block;
    }

    .is-invalid,
    .was-validated :invalid {
      border-color: #dc3545;
    }
  </style>
</form>
